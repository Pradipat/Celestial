"use client";
import { useState, useEffect } from "react";
import axios from "axios";
import { useDebounce } from "@/utils/hook/useDebounce";

import { useSession, signOut } from "next-auth/react";
import { useRouter } from "next/navigation";

// üìå ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
const statusOptions = ["-", "Idea Submission", "Quote and Agreement", "Half Payment", "Sketch Phase",
                       "Coloring Phase", "Final Review", "Final Payment", "Delivered"];
const statusColors = {
   "Idea Submission": "bg-yellow-500",
   "Quote and Agreement": "bg-blue-500",
   "Half Payment": "bg-orange-500",
   "Sketch Phase": "bg-purple-500",
   "Coloring Phase": "bg-indigo-500",
   "Final Review": "bg-pink-500",
   "Final Payment": "bg-green-500",
   "Delivered": "bg-gray-500",
   "-": "bg-red-500",
};

export default function AdminQueuePage() {
  return (
    <ProtectedAdminQueuePage />
  );
}

function ProtectedAdminQueuePage() {
  const { data: session, status } = useSession();
  const router = useRouter();

  // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ `useSession()` ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡πà‡∏≠‡∏ô
  if (status === "loading") return <h1>Loading...</h1>;

  // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡πá‡∏ô Admin ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ
  if (!session || session.user.role !== "admin") {
    return <h1>‚õî Access Denied</h1>;
  }

  return <AdminQueuePageContent />;
}

function AdminQueuePageContent() {
  const [queue, setQueue] = useState({});
  const [loading, setLoading] = useState(true);
  const [editedQueue, setEditedQueue] = useState({}); // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á API
  const [newOrders, setNewOrders] = useState({});
  const [newMonth, setNewMonth] = useState("");


  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  useEffect(() => {
    const fetchQueue = async () => {
      try {
        const res = await axios.get("/api/queue/get-all");
        const groupedQueue = res.data.queues.reduce((acc, item) => {
          if (!acc[item.month]) acc[item.month] = [];
          acc[item.month] = [...acc[item.month], ...item.orders]; // ‡∏£‡∏ß‡∏° order ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
          return acc;
        }, {});

        setQueue(groupedQueue);

        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á newOrders ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö groupedQueue
        const initialNewOrders = {};
        Object.keys(groupedQueue).forEach((month) => {
          initialNewOrders[month] = {
            name: "",
            details: "",
            status: "-", // ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á Status
          };
        });

        setNewOrders(initialNewOrders); // ‚úÖ ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ newOrders
        
      } catch (error) {
        console.error("Error fetching queue:", error);
      } finally {
        setLoading(false);
      }
    };
    fetchQueue();
  }, []);

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô add month
  const handleAddMonth = async () => {
    if (!newMonth.trim()) return;
    
    try {
      const res = await axios.post("/api/queue/create-month", { month: newMonth });
  
      if (res.status === 200) {
        setQueue((prevQueue) => ({
          ...prevQueue,
          [newMonth]: [], // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏¥‡∏ß
        }));

        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô newOrders ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà
        setNewOrders((prevNewOrders) => ({
          ...prevNewOrders,
          [newMonth]: {
            name: "",
            details: "",
            status: "-", // ‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          }
        }));

        setNewMonth(""); // ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ input

      }
    } catch (error) {
      console.error("Error adding month:", error);
    }
  };

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô update queue
  const handleChange = (orderId, month, field, value) => {
    setQueue((prevQueue) => {
      const updatedQueue = { ...prevQueue };
      updatedQueue[month] = updatedQueue[month].map((item) =>
        item._id === orderId ? { ...item, [field]: value } : item
      );
      return updatedQueue;
    });

    setEditedQueue((prev) => ({
      ...prev,
      [`${month}-${orderId}`]: { ...prev[`${month}-${orderId}`], [field]: value },
    }));
  };

  // ‚úÖ ‡πÉ‡∏ä‡πâ Debounce ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡πà‡∏á API
  const debouncedQueue = useDebounce(editedQueue, 1000);

  // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠ Debounce ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡πà‡∏á API
  useEffect(() => {
    Object.keys(debouncedQueue).forEach(async (key) => {
      const [month, orderId] = key.split("-");
      const updatedData = debouncedQueue[key];

      try {
        await axios.put("/api/queue/update-order", {
          month,
          orderId,
          ...updatedData,
        });
      } catch (error) {
        console.error("Error updating order:", error);
      }
    });
  }, [debouncedQueue]);

  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Queue ‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
  const handleAddOrder = async (month) => {
    if (!month) return;
  
    try {
      // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const newOrderData = {
        name: newOrders[month]?.name || "-",
        details: newOrders[month]?.details || "-",
        status: newOrders[month]?.status || "-",
      };
  
      const res = await axios.post("/api/queue/add-order", {
        month,
        order: newOrderData,
      });

      const updatedOrders = res.data.queue.orders;
      const newOrder = updatedOrders[updatedOrders.length - 1];
  
      if (res.status === 200 && newOrder) {
        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÇ‡∏î‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô State
        setQueue((prevQueue) => ({
          ...prevQueue,
          [month]: [...(prevQueue[month] || []), newOrder], 
        }));
  
        // ‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤ input ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°
        setNewOrders((prev) => ({
          ...prev,
          [month]: { name: "", details: "", status: "-" },
        }));
      }
    } catch (error) {
      console.error("Error adding order:", error);
    }
  };
  

  // ‚úÖ ‡∏•‡∏ö Queue ‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
  const handleDeleteOrder = async (month, orderId) => {
    // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Å‡πà‡∏≠‡∏ô
    if (!confirm("‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) return;
  
    try {
      // ‡∏™‡πà‡∏á DELETE Request ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ query parameters ‡∏ú‡πà‡∏≤‡∏ô axios.delete
      const res = await axios.delete("/api/queue/delete-order", {
        params: { month, orderId },
      });
  
      if (res.status === 200) {
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI: ‡∏•‡∏ö order ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å state queue
        setQueue((prevQueue) => ({
          ...prevQueue,
          [month]: prevQueue[month].filter((item) => item._id !== orderId),
        }));
      }
    } catch (error) {
      console.error("Error deleting order:", error.response?.data || error.message);
    }
  };

  // ‚úÖ ‡∏•‡∏ö Month
  const handleDeleteMonth = async (month) => {
    if (!confirm(`‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${month} ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) return;
  
    try {
      const res = await axios.delete("/api/queue/delete-month", { data: { month } });
  
      if (res.status === 200) {
        setQueue((prevQueue) => {
          const updatedQueue = { ...prevQueue };
          delete updatedQueue[month]; // ‡∏•‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å state
          return updatedQueue;
        });
      }
    } catch (error) {
      console.error("‚ùå Error deleting month:", error);
    }
  };

  const TestLog = () => {
    console.log(newOrders)
  }
  

  return (
    <div className="max-w-5xl mx-auto p-6">
      <h1 className="text-3xl font-bold mb-6 text-center">üîß Manage Queue</h1>

      {loading ? (
        <p className="text-center">‚è≥ Loading queue...</p>
      ) : (
        Object.keys(queue).map((month) => (
          <div key={month} className="mb-8">
            <div className="flex gap-2 items-center mb-4">
              <h2 className="text-2xl font-semibold text-gray-700">{month} Queue</h2>
              <button
                onClick={() => handleDeleteMonth(month)}
                className="bg-red-500 text-white px-3 py-[1px] rounded hover:bg-red-700"
              >
                -
              </button>
            </div>

            <div className="overflow-x-auto">
              <table className="min-w-full bg-white border border-gray-300 shadow-md">
                <thead className="bg-gray-100">
                  <tr>
                    <th className="py-3 px-6 text-left border-b">Name</th>
                    <th className="py-3 px-6 text-left border-b">Detail</th>
                    <th className="py-3 px-6 text-left border-b">Status</th>
                    <th className="py-3 px-6 text-center border-b">Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {queue[month].map((item) => (
                    <tr key={item._id} className="hover:bg-gray-50">
                      <td className="py-3 px-6 border-b">
                        <input
                          type="text"
                          value={item.name}
                          onChange={(e) => handleChange(item._id, month, "name", e.target.value)}
                          className="border p-1 rounded w-full"
                        />
                      </td>
                      <td className="py-3 px-6 border-b">
                        <input
                          type="text"
                          value={item.details}
                          onChange={(e) => handleChange(item._id, month, "details", e.target.value)}
                          className="border p-1 rounded w-full"
                        />
                      </td>
                      <td className="py-3 px-6 border-b">
                        <select
                          value={item.status}
                          onChange={(e) => handleChange(item._id, month, "status", e.target.value)}
                          className={`p-2 rounded-lg text-white ${statusColors[item.status]}`}
                        >
                          {statusOptions.map((status) => (
                            <option key={status} value={status}>
                              {status}
                            </option>
                          ))}
                        </select>
                      </td>
                      <td className="py-3 px-6 border-b text-center">
                        <button
                          onClick={() => handleDeleteOrder(month, item._id)}
                          className="bg-red-500 text-white px-2 py-1 rounded hover:bg-red-700"
                        >
                          -
                        </button>
                      </td>
                    </tr>
                  ))}
                  {/* ‚úÖ Row ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° Queue */}
                  <tr className="hover:bg-gray-100">
                    <td className="py-3 px-6 border-b">
                      <input
                        type="text"
                        placeholder="New Name"
                        value={newOrders[month]?.name}
                        onChange={(e) =>
                          setNewOrders((prev) => ({
                            ...prev,
                            [month]: { ...prev[month], name: e.target.value },
                          }))
                        }
                        className="border p-1 rounded w-full"
                      />
                    </td>
                    <td className="py-3 px-6 border-b">
                      <input
                        type="text"
                        placeholder="New Details"
                        value={newOrders[month]?.details}
                        onChange={(e) =>
                          setNewOrders((prev) => ({
                            ...prev,
                            [month]: { ...prev[month], details: e.target.value },
                          }))
                        }
                        className="border p-1 rounded w-full"
                      />
                    </td>
                    <td className="py-3 px-6 border-b">
                      <select
                        value={newOrders[month]?.status}
                        onChange={(e) =>
                          setNewOrders((prev) => ({
                            ...prev,
                            [month]: { ...prev[month], status: e.target.value },
                          }))
                        }
                        className="p-2 rounded-lg text-white bg-gray-400"
                      >
                        {statusOptions.map((status) => (
                          <option key={status} value={status}>
                            {status}
                          </option>
                        ))}
                      </select>
                    </td>
                    <td className="py-3 px-6 border-b text-center">
                      <button
                        onClick={() => handleAddOrder(month)}
                        className="bg-green-500 text-white px-2 py-1 rounded hover:bg-green-700"
                      >
                        +
                      </button>
                    </td>
                  </tr>
                </tbody>
              </table>
            </div>
          </div>
        ))
      )}

      {/* ‚úÖ Input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏° Month */}
      <div className="flex flex-col item-center mt-14 gap-4">
        <h2 className="text-2xl font-semibold text-gray-700">Add new month</h2>
        <div className="flex gap-4">
          <input
            type="text"
            placeholder="Enter month (e.g., May 2024)"
            value={newMonth}
            onChange={(e) => setNewMonth(e.target.value)}
            className="border p-2 rounded w-1/3"
          />
          <button
            onClick={handleAddMonth}
            className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-700"
          >
            +
          </button>
        </div>
      </div>

      <button
        onClick={TestLog}
        className="fixed bottom-4 right-4 bg-blue-500 text-white px-4 py-2 rounded-full shadow-lg hover:bg-blue-600"
      >
        Log
      </button>

    </div>
  );
}
